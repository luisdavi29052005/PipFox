import { chromium, Page } from 'playwright'
import { openContextForAccount } from '../../../src/core/automations/facebook/session/context'
import { getTestIds } from './helpers/getTestIds'

export interface TestLoginOptions {
  userId: string
  accountId: string
  groupUrl?: string
  headless?: boolean
}

/**
 * Testa se a sess√£o salva ainda est√° v√°lida
 */
export async function testLogin(options: TestLoginOptions): Promise<boolean> {
  const {
    userId,
    accountId,
    groupUrl = 'https://www.facebook.com/groups/940840924057399',
    headless = false
  } = options

  console.log('[testLogin] Iniciando teste de login...')
  console.log(`[testLogin] Usuario: ${userId}`)
  console.log(`[testLogin] Conta: ${accountId}`)
  console.log(`[testLogin] Grupo: ${groupUrl}`)

  try {
    // Abrir contexto com sess√£o salva
    const context = await openContextForAccount(userId, accountId, headless)
    const page = await context.newPage()

    // Navegar para o grupo
    console.log(`[testLogin] Navegando para o grupo...`);

    // Validate URL before navigation
    if (!groupUrl.startsWith('http://') && !groupUrl.startsWith('https://')) {
      throw new Error(`URL inv√°lida: ${groupUrl}. A URL deve come√ßar com http:// ou https://`);
    }

    await page.goto(groupUrl, { waitUntil: 'domcontentloaded' })

    // Verificar se est√° logado
    const isLoggedIn = await checkLoginStatus(page)

    if (isLoggedIn) {
      console.log('[testLogin] ‚úÖ Login bem-sucedido!')

      // Verificar se consegue acessar o feed do grupo
      try {
        await page.waitForSelector('[role="feed"]', { timeout: 10000 })
        console.log('[testLogin] ‚úÖ Feed do grupo carregado!')
      } catch {
        console.log('[testLogin] ‚ö†Ô∏è Feed n√£o carregou, mas est√° logado')
      }
    } else {
      console.log('[testLogin] ‚ùå N√£o est√° logado ou sess√£o expirou')
    }

    await context.close()
    return isLoggedIn

  } catch (error) {
    console.error('[testLogin] Erro:', error)
    throw error
  }
}

/**
 * Verifica se o usu√°rio est√° logado
 */
async function checkLoginStatus(page: Page): Promise<boolean> {
  try {
    // Aguardar o feed aparecer (indica login ativo)
    await page.locator('div[role="feed"]').first().waitFor({ 
      state: 'visible', 
      timeout: 8000 
    })
    return true
  } catch {
    // Verificar se h√° indicadores de tela de login
    const loginHints = page.locator(
      'form[action*="login"], input[name="email"], input[id="email"]'
    )

    const hasLoginForm = await loginHints.first().isVisible({ timeout: 5000 }).catch(() => false)
    return !hasLoginForm
  }
}

/**
 * Mostra ajuda do teste de login
 */
function showLoginHelp() {
  console.log('üîë TESTE DE LOGIN - AJUDA')
  console.log('==========================')
  console.log('')
  console.log('FUN√á√ÉO: Testa se a sess√£o salva do Facebook ainda est√° v√°lida')
  console.log('')
  console.log('COMANDOS:')
  console.log('npx tsx testLogin.ts [userId] [accountId] [groupUrl] [options]')
  console.log('npx tsx testLogin.ts auto auto [groupUrl] [options]')
  console.log('npx tsx testLogin.ts --help')
  console.log('')
  console.log('OP√á√ïES:')
  console.log('--headless          Executa sem interface gr√°fica')
  console.log('--help              Mostra esta ajuda')
  console.log('')
  console.log('O QUE FAZ:')
  console.log('‚Ä¢ Abre contexto com sess√£o salva do Supabase')
  console.log('‚Ä¢ Navega para URL do grupo especificado')
  console.log('‚Ä¢ Verifica se est√° logado (procura por feed)')
  console.log('‚Ä¢ Testa acesso ao feed do grupo')
  console.log('‚Ä¢ Retorna status de sucesso/falha')
  console.log('')
  console.log('INDICADORES DE SUCESSO:')
  console.log('‚úÖ Feed do grupo carregado = Login OK')
  console.log('‚ö†Ô∏è  Logado mas feed n√£o carrega = Parcial')
  console.log('‚ùå Tela de login detectada = Falha')
  console.log('')
}

// CLI Interface
if (require.main === module) {
  async function main() {
    // Check for help
    if (process.argv.includes('--help') || process.argv.includes('-h')) {
      showLoginHelp()
      return
    }
    let userId = process.argv[2]
    let accountId = process.argv[3]

    // Se n√£o foram fornecidos IDs, buscar automaticamente
    if (!userId || !accountId || userId === 'auto' || accountId === 'auto') {
      console.log('üîÑ Buscando IDs automaticamente...')
      const testIds = await getTestIds()

      if (!testIds) {
        console.error('‚ùå N√£o foi poss√≠vel obter IDs de teste')
        process.exit(1)
      }

      userId = testIds.userId
      accountId = testIds.accountId
      console.log(`‚úÖ Usando conta: ${testIds.accountName} (${testIds.status})`)
    }

    const groupUrl = process.argv[4] || 'https://www.facebook.com/groups/940840924057399'
    const headless = process.argv.includes('--headless')

    try {
      const success = await testLogin({
        userId,
        accountId,
        groupUrl,
        headless
      })

      console.log(`\nResultado final: ${success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`)
      process.exit(success ? 0 : 1)
    } catch (err) {
      console.error('üí• Erro fatal:', err)
      process.exit(1)
    }
  }

  main().catch(err => {
    console.error('üí• Erro no main:', err)
    process.exit(1)
  })
}